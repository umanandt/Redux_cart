{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiSliceActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const itemId = action.payload;\n      console.log(itemId);\n      const existingItem = state.items.find(item => item.id === itemId);\n      console.log(existingItem);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        // state.items.splice(existingItem, 1);\n        state.items = state.items.filter(item => item.id !== itemId);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiSliceActions.showNotification({\n      status: \"pending\",\n      title: \"sending data...\",\n      message: \"sending cart data\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://request-bb071-default-rtdb.firebaseio.com//cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiSliceActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent cart data successfully\"\n      }));\n    } catch {\n      sendRequest().catch(error => {\n        dispatch(uiSliceActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending Cart data failed\"\n        }));\n      });\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiSliceActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","itemId","console","log","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","catch","error","cartActions","actions"],"sources":["D:/Redux Practise Project/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { uiSliceActions } from \"./ui-slice\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const itemId = action.payload;\r\n      console.log(itemId);\r\n      const existingItem = state.items.find((item) => item.id === itemId);\r\n      console.log(existingItem);\r\n      state.totalQuantity--;\r\n      if (existingItem.quantity === 1) {\r\n        // state.items.splice(existingItem, 1);\r\n        state.items = state.items.filter((item) => item.id !== itemId);\r\n      } else {\r\n        existingItem.quantity--;\r\n       existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const sendCartData = (cart) => {\r\n return async (dispatch) => {\r\n    dispatch(\r\n    uiSliceActions.showNotification({\r\n      status: \"pending\",\r\n      title: \"sending data...\",\r\n      message: \"sending cart data\",\r\n    })\r\n  );\r\n \r\nconst sendRequest = async () => {\r\n  const response = await fetch(\r\n    \"https://request-bb071-default-rtdb.firebaseio.com//cart.json\",\r\n    {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(cart),\r\n    }\r\n  );\r\n  if (!response.ok) {\r\n    throw new Error(\"Sending cart data failed\");\r\n  }\r\n }\r\n \r\n  try{\r\n    await sendRequest();\r\n    dispatch(\r\n      uiSliceActions.showNotification({\r\n        status: \"success\",\r\n        title: \"Success!\",\r\n        message: \"Sent cart data successfully\",\r\n      })\r\n    );\r\n  }\r\n\r\n  catch{\r\n    sendRequest().catch((error) => {\r\n      dispatch(\r\n        uiSliceActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Sending Cart data failed\",\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n}\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice;"],"mappings":"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"},"metadata":{},"sourceType":"module"}